AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: Custom VPC with private and public subnets.

Parameters:
  Stage:
    Type: String
    Description: Deployment stage

  AppName:
    Type: String
    Description: Name of the application

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-vpc"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-igw"

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-public"

  # Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-private-1"

  # Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-private-2"

  # Route Table for Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-public-rt"

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-private-rt"

  # Route for Public Subnet
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet with Public Route Table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Associate Private Subnet 1 with Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Associate Private Subnet 2 with Private Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

 #Security Group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  CustomSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for general use cases
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub CustomSG-${Stage}

  # =============================================================================
  # ECS/ALB SECURITY GROUPS (Added for Container Infrastructure)
  # =============================================================================

  # Base Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AppName}${Stage}-alb-sg"
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from Internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from Internet
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-alb-sg"

  # Base Security Group for Public Services (Streamlit + FastAPI)
  PublicServicesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AppName}${Stage}-public-services-sg"
      GroupDescription: Security group for public-facing services
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: FastAPI from ALB
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Streamlit from ALB
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-public-services-sg"

  # Base Security Group for Private Services (BLS, Salary, Scraping)
  PrivateServicesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AppName}${Stage}-private-services-sg"
      GroupDescription: Security group for internal microservices
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9003
          ToPort: 9003
          SourceSecurityGroupId: !Ref PublicServicesSecurityGroup
          Description: BLS Server from Public Services
        - IpProtocol: tcp
          FromPort: 9004
          ToPort: 9004
          SourceSecurityGroupId: !Ref PublicServicesSecurityGroup
          Description: Salary Server from Public Services
        - IpProtocol: tcp
          FromPort: 9002
          ToPort: 9002
          SourceSecurityGroupId: !Ref PublicServicesSecurityGroup
          Description: Scraping Server from Public Services
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-private-services-sg"

  # Self-referencing rule for internal communication between private services
  PrivateServicesInternalRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PrivateServicesSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PrivateServicesSecurityGroup
      Description: Internal communication between private services

  # Elastic IP for NAT Gateway
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway in Public Subnet
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${AppName}${Stage}-natgw"

  # Route for Private Subnets to Internet via NAT Gateway
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway


Outputs:
  VPCDashBoardUrl:
    Description: URL for the dashboard
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/vpcconsole/home?region=us-east-1#vpcs:VpcId=${VPC}"

  VPCId:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AppName}${Stage}-VpcId"

  PublicSubnetId:
    Description: The ID of the public subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${AppName}${Stage}-PublicSubnetId"

  PrivateSubnet1Id:
    Description: The ID of the first private subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AppName}${Stage}-PrivateSubnet1Id"

  PrivateSubnet2Id:
    Description: The ID of the second private subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AppName}${Stage}-PrivateSubnet2Id"

  RDSSecurityGroupId:
    Description: The ID of the security group for RDS
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub "${AppName}${Stage}-RDSSecurityGroupId"

  CustomSecurityGroupId:
    Description: The ID of the custom security group
    Value: !Ref CustomSecurityGroup
    Export:
      Name: !Sub "${AppName}${Stage}-CustomSecurityGroupId"

  # =============================================================================
  # ECS/ALB SECURITY GROUP OUTPUTS (Added for Container Infrastructure)
  # =============================================================================

  ALBSecurityGroupId:
    Description: The ID of the ALB security group
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub "${AppName}${Stage}-ALBSecurityGroupId"

  PublicServicesSecurityGroupId:
    Description: The ID of the public services security group
    Value: !Ref PublicServicesSecurityGroup
    Export:
      Name: !Sub "${AppName}${Stage}-PublicServicesSecurityGroupId"

  PrivateServicesSecurityGroupId:
    Description: The ID of the private services security group
    Value: !Ref PrivateServicesSecurityGroup
    Export:
      Name: !Sub "${AppName}${Stage}-PrivateServicesSecurityGroupId"

  # Gateway Information
  InternetGatewayId:
    Description: The ID of the Internet Gateway
    Value: !Ref InternetGateway
    Export:
      Name: !Sub "${AppName}${Stage}-InternetGatewayId"

  NatGatewayId:
    Description: The ID of the NAT Gateway
    Value: !Ref NatGateway
    Export:
      Name: !Sub "${AppName}${Stage}-NatGatewayId"

  # Route Table Information
  PublicRouteTableId:
    Description: The ID of the public route table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AppName}${Stage}-PublicRouteTableId"

  PrivateRouteTableId:
    Description: The ID of the private route table
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub "${AppName}${Stage}-PrivateRouteTableId"